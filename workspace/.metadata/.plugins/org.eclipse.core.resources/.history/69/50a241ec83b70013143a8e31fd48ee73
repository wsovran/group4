package com.example.archer;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Context;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

public class MainGamePanel extends SurfaceView implements SurfaceHolder.Callback
{
	private GameThread thread;
	private Archer archer;
	private DPad dpad;
	private Shoot shoot;
	private static final String TAG = MainGamePanel.class.getSimpleName();
	private ArrayList<Arrow> arrows = new ArrayList<Arrow>();
	private ArrayList<Enemy> enemies = new ArrayList<Enemy>();
	private ArrayList<Ally> allies = new ArrayList<Ally>();

 public MainGamePanel(Context context) {
	 super(context);
	 getHolder().addCallback(this);
	 
	 //init actors
	 archer = new Archer(BitmapFactory.decodeResource(getResources(), R.drawable.droid_1), 50, 200);
	 
	 //init dpad
	 dpad = new DPad(BitmapFactory.decodeResource(getResources(), R.drawable.d_pad), 0, 500);
	 
	 //init shoot
	 shoot = new Shoot(BitmapFactory.decodeResource(getResources(), R.drawable.button), 1400, 500);
	 
	 thread = new GameThread(getHolder(), this);//create thread
	 setFocusable(true);
 }

 @Override
 public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
 }

 @Override
 public void surfaceCreated(SurfaceHolder holder) {
	 thread.setRunning(true);
	 thread.start();
 }

 @Override
 public void surfaceDestroyed(SurfaceHolder holder) {
 }

 @Override
	 public boolean onTouchEvent(MotionEvent event) {
	 
	 	int quad = 0;
	 	boolean touchedQuad = false;
	 	quad = dpad.handleActionDown((int)event.getX(), (int)event.getY());
		 if (event.getAction() == MotionEvent.ACTION_DOWN)
		 {
			 //Log.d(TAG, "Coords: x=" + event.getX(0) + ",y=" + event.getY(0));
			 //quad = dpad.handleActionDown((int)event.getX(), (int)event.getY());
			 if (quad > 0)
				 dpad.setTouched(true);
			 shoot.checkBounds((int)event.getX(), (int)event.getY());
			 //archer.handleActionDown(quad);
		 }
		 if (event.getAction() == MotionEvent.ACTION_UP) {
			   // touch was released
			 if (dpad.isTouched())
			 {
				 dpad.setTouched(false);
			 }
			 if(shoot.isTouched() && arrows.size()<5)
			 {
				 Arrow arrow = new Arrow(BitmapFactory.decodeResource(getResources(), R.drawable.arrow), archer.getX(), archer.getY(),archer.getAngle());
				 shoot.handleActionUp(arrow, archer.getAngle());
				 shoot.setTouched(false);
				 arrows.add(arrow);
			 }
		 }
		 
		  return true;
	 }
 public void updateArcher()
 {
	 if (dpad.isTouched())
		 archer.handleActionDown(dpad.getPrevQuad());
 }
 public void updateShoot()
 {
	 if(shoot.isTouched())
	 {
		 shoot.handleActionDown();
	 }
 }
 public void updateEnemy()
 {
	 enemies.add(new Enemy(BitmapFactory.decodeResource(getResources(), R.drawable.droid_1), 100, -5, 0, 1900));
 }
 public void updateAlly()
 {
	 allies.add(new Ally(BitmapFactory.decodeResource(getResources(), R.drawable.droid_1), 100, 5, 0, 20));
 }

 @Override
 protected void onDraw(Canvas canvas) {
	 canvas.drawColor(Color.BLACK); 
	 Paint paint = new Paint();
	 paint.setColor(Color.WHITE);
	 paint.setTextSize(36);
	 canvas.drawText(""+archer.getAngle(), 50, 50, paint);
	 canvas.drawText(""+shoot.getPower(), 150, 50, paint);
	 archer.draw(canvas);
	 dpad.draw(canvas);
	 shoot.draw(canvas);
	 for(int i=0;i< arrows.size(); i++)
	 {
		 if(!arrows.get(i).draw(canvas))
		 {
			 arrows.remove(i--);
		 }
	 }
	 for(int i=0;i< enemies.size(); i++)
	 {
		 enemies.get(i).draw(canvas);
	 }
	 for(int i=0;i< allies.size(); i++)
	 {
		 allies.get(i).draw(canvas);
	 }
	 
 }
}
